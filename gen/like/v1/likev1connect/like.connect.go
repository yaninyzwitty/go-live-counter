// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: like/v1/like.proto

package likev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/yaninyzwitty/go-live-counter/gen/like/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LikeServiceName is the fully-qualified name of the LikeService service.
	LikeServiceName = "like.v1.LikeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LikeServiceCreateLikeProcedure is the fully-qualified name of the LikeService's CreateLike RPC.
	LikeServiceCreateLikeProcedure = "/like.v1.LikeService/CreateLike"
	// LikeServiceStreamLikesProcedure is the fully-qualified name of the LikeService's StreamLikes RPC.
	LikeServiceStreamLikesProcedure = "/like.v1.LikeService/StreamLikes"
)

// LikeServiceClient is a client for the like.v1.LikeService service.
type LikeServiceClient interface {
	CreateLike(context.Context, *connect.Request[v1.CreateLikeRequest]) (*connect.Response[v1.CreateLikeResponse], error)
	StreamLikes(context.Context, *connect.Request[v1.StreamLikesRequest]) (*connect.ServerStreamForClient[v1.LikeUpdate], error)
}

// NewLikeServiceClient constructs a client for the like.v1.LikeService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLikeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LikeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	likeServiceMethods := v1.File_like_v1_like_proto.Services().ByName("LikeService").Methods()
	return &likeServiceClient{
		createLike: connect.NewClient[v1.CreateLikeRequest, v1.CreateLikeResponse](
			httpClient,
			baseURL+LikeServiceCreateLikeProcedure,
			connect.WithSchema(likeServiceMethods.ByName("CreateLike")),
			connect.WithClientOptions(opts...),
		),
		streamLikes: connect.NewClient[v1.StreamLikesRequest, v1.LikeUpdate](
			httpClient,
			baseURL+LikeServiceStreamLikesProcedure,
			connect.WithSchema(likeServiceMethods.ByName("StreamLikes")),
			connect.WithClientOptions(opts...),
		),
	}
}

// likeServiceClient implements LikeServiceClient.
type likeServiceClient struct {
	createLike  *connect.Client[v1.CreateLikeRequest, v1.CreateLikeResponse]
	streamLikes *connect.Client[v1.StreamLikesRequest, v1.LikeUpdate]
}

// CreateLike calls like.v1.LikeService.CreateLike.
func (c *likeServiceClient) CreateLike(ctx context.Context, req *connect.Request[v1.CreateLikeRequest]) (*connect.Response[v1.CreateLikeResponse], error) {
	return c.createLike.CallUnary(ctx, req)
}

// StreamLikes calls like.v1.LikeService.StreamLikes.
func (c *likeServiceClient) StreamLikes(ctx context.Context, req *connect.Request[v1.StreamLikesRequest]) (*connect.ServerStreamForClient[v1.LikeUpdate], error) {
	return c.streamLikes.CallServerStream(ctx, req)
}

// LikeServiceHandler is an implementation of the like.v1.LikeService service.
type LikeServiceHandler interface {
	CreateLike(context.Context, *connect.Request[v1.CreateLikeRequest]) (*connect.Response[v1.CreateLikeResponse], error)
	StreamLikes(context.Context, *connect.Request[v1.StreamLikesRequest], *connect.ServerStream[v1.LikeUpdate]) error
}

// NewLikeServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLikeServiceHandler(svc LikeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	likeServiceMethods := v1.File_like_v1_like_proto.Services().ByName("LikeService").Methods()
	likeServiceCreateLikeHandler := connect.NewUnaryHandler(
		LikeServiceCreateLikeProcedure,
		svc.CreateLike,
		connect.WithSchema(likeServiceMethods.ByName("CreateLike")),
		connect.WithHandlerOptions(opts...),
	)
	likeServiceStreamLikesHandler := connect.NewServerStreamHandler(
		LikeServiceStreamLikesProcedure,
		svc.StreamLikes,
		connect.WithSchema(likeServiceMethods.ByName("StreamLikes")),
		connect.WithHandlerOptions(opts...),
	)
	return "/like.v1.LikeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LikeServiceCreateLikeProcedure:
			likeServiceCreateLikeHandler.ServeHTTP(w, r)
		case LikeServiceStreamLikesProcedure:
			likeServiceStreamLikesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLikeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLikeServiceHandler struct{}

func (UnimplementedLikeServiceHandler) CreateLike(context.Context, *connect.Request[v1.CreateLikeRequest]) (*connect.Response[v1.CreateLikeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("like.v1.LikeService.CreateLike is not implemented"))
}

func (UnimplementedLikeServiceHandler) StreamLikes(context.Context, *connect.Request[v1.StreamLikesRequest], *connect.ServerStream[v1.LikeUpdate]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("like.v1.LikeService.StreamLikes is not implemented"))
}
