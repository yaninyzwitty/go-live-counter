// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: post.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const findAllPosts = `-- name: FindAllPosts :many
SELECT id, user_id, content, created_at, updated_at FROM posts
`

func (q *Queries) FindAllPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, findAllPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPostByID = `-- name: FindPostByID :one
SELECT id, user_id, content, created_at, updated_at FROM posts
WHERE id = $1
`

func (q *Queries) FindPostByID(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, findPostByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findPostJoinedByUser = `-- name: FindPostJoinedByUser :one
SELECT 
  u.id          AS user_id,
  u.name        AS user_name,
  u.email       AS user_email,
  u.created_at  AS user_created_at,
  u.updated_at  AS user_updated_at,
  p.id          AS post_id,
  p.user_id     AS post_user_id,
  p.content     AS post_content,
  p.created_at  AS post_created_at,
  p.updated_at  AS post_updated_at
FROM posts p
JOIN users u ON u.id = p.user_id
WHERE p.id = $1
`

type FindPostJoinedByUserRow struct {
	UserID        uuid.UUID   `json:"user_id"`
	UserName      string      `json:"user_name"`
	UserEmail     pgtype.Text `json:"user_email"`
	UserCreatedAt time.Time   `json:"user_created_at"`
	UserUpdatedAt time.Time   `json:"user_updated_at"`
	PostID        uuid.UUID   `json:"post_id"`
	PostUserID    uuid.UUID   `json:"post_user_id"`
	PostContent   string      `json:"post_content"`
	PostCreatedAt time.Time   `json:"post_created_at"`
	PostUpdatedAt time.Time   `json:"post_updated_at"`
}

func (q *Queries) FindPostJoinedByUser(ctx context.Context, id uuid.UUID) (FindPostJoinedByUserRow, error) {
	row := q.db.QueryRow(ctx, findPostJoinedByUser, id)
	var i FindPostJoinedByUserRow
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.UserEmail,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
		&i.PostID,
		&i.PostUserID,
		&i.PostContent,
		&i.PostCreatedAt,
		&i.PostUpdatedAt,
	)
	return i, err
}

const insertPost = `-- name: InsertPost :one
INSERT INTO posts (id, user_id, content)
VALUES (gen_random_uuid(), $1, $2)
RETURNING id, user_id, content, created_at, updated_at
`

type InsertPostParams struct {
	UserID  uuid.UUID `json:"user_id"`
	Content string    `json:"content"`
}

func (q *Queries) InsertPost(ctx context.Context, arg InsertPostParams) (Post, error) {
	row := q.db.QueryRow(ctx, insertPost, arg.UserID, arg.Content)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
