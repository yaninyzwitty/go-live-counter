// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const findAllUsers = `-- name: FindAllUsers :many
SELECT id, name, email, created_at, updated_at FROM users
`

func (q *Queries) FindAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, findAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findItemByID = `-- name: FindItemByID :one
SELECT id, name, email, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) FindItemByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, findItemByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertItem = `-- name: InsertItem :one
INSERT INTO users (id, name, email)
VALUES (uuid_generate_v4(), $1, $2)
RETURNING id, name, email, created_at, updated_at
`

type InsertItemParams struct {
	Name  string      `json:"name"`
	Email pgtype.Text `json:"email"`
}

func (q *Queries) InsertItem(ctx context.Context, arg InsertItemParams) (User, error) {
	row := q.db.QueryRow(ctx, insertItem, arg.Name, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
