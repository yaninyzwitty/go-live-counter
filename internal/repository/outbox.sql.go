// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: outbox.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const findAndLockUnpublishedEvents = `-- name: FindAndLockUnpublishedEvents :many
SELECT id, event_type, payload, created_at, published, processed_at FROM outbox
WHERE published = false
ORDER BY created_at
LIMIT 10
FOR UPDATE SKIP LOCKED
`

func (q *Queries) FindAndLockUnpublishedEvents(ctx context.Context) ([]Outbox, error) {
	rows, err := q.db.Query(ctx, findAndLockUnpublishedEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Outbox
	for rows.Next() {
		var i Outbox
		if err := rows.Scan(
			&i.ID,
			&i.EventType,
			&i.Payload,
			&i.CreatedAt,
			&i.Published,
			&i.ProcessedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPayloadEvent = `-- name: InsertPayloadEvent :one
INSERT INTO outbox (id, event_type, payload, published)
VALUES (
    gen_random_uuid(),  -- CockroachDB-safe UUID
    $1,                 -- event_type
    $2,                 -- payload (JSONB)
    false               -- always start unpublished
)
RETURNING id, event_type, payload, created_at, published, processed_at
`

type InsertPayloadEventParams struct {
	EventType string `json:"event_type"`
	Payload   []byte `json:"payload"`
}

func (q *Queries) InsertPayloadEvent(ctx context.Context, arg InsertPayloadEventParams) (Outbox, error) {
	row := q.db.QueryRow(ctx, insertPayloadEvent, arg.EventType, arg.Payload)
	var i Outbox
	err := row.Scan(
		&i.ID,
		&i.EventType,
		&i.Payload,
		&i.CreatedAt,
		&i.Published,
		&i.ProcessedAt,
	)
	return i, err
}

const publishProcessedEvent = `-- name: PublishProcessedEvent :one
UPDATE outbox
SET published = true, processed_at = now()
WHERE id = $1
RETURNING id, event_type, payload, created_at, published, processed_at
`

func (q *Queries) PublishProcessedEvent(ctx context.Context, id uuid.UUID) (Outbox, error) {
	row := q.db.QueryRow(ctx, publishProcessedEvent, id)
	var i Outbox
	err := row.Scan(
		&i.ID,
		&i.EventType,
		&i.Payload,
		&i.CreatedAt,
		&i.Published,
		&i.ProcessedAt,
	)
	return i, err
}

const publishProcessedEvents = `-- name: PublishProcessedEvents :exec
UPDATE outbox
SET published = true, processed_at = now()
WHERE id = ANY($1::uuid[])
`

func (q *Queries) PublishProcessedEvents(ctx context.Context, dollar_1 []uuid.UUID) error {
	_, err := q.db.Exec(ctx, publishProcessedEvents, dollar_1)
	return err
}
